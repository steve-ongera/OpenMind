# Generated by Django 5.2.4 on 2025-10-21 21:45

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Achievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
                ('slug', models.SlugField(unique=True)),
                ('description', models.TextField()),
                ('icon', models.CharField(max_length=100)),
                ('requirement_type', models.CharField(max_length=50)),
                ('requirement_count', models.IntegerField()),
                ('points', models.IntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'achievements',
            },
        ),
        migrations.CreateModel(
            name='ChatMessage',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('sender', models.CharField(choices=[('user', 'User'), ('bot', 'AI Bot'), ('system', 'System')], max_length=10)),
                ('message_text', models.TextField()),
                ('sentiment_score', models.FloatField(blank=True, null=True)),
                ('emotion_detected', models.JSONField(default=dict)),
                ('intent_classification', models.CharField(blank=True, max_length=100)),
                ('keywords_extracted', models.JSONField(default=list)),
                ('contains_crisis_keywords', models.BooleanField(default=False)),
                ('suicide_risk_score', models.FloatField(blank=True, null=True)),
                ('requires_intervention', models.BooleanField(default=False)),
                ('is_flagged', models.BooleanField(default=False)),
                ('flagged_reason', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'chat_messages',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='ForumCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('slug', models.SlugField(unique=True)),
                ('description', models.TextField()),
                ('icon', models.CharField(blank=True, max_length=50)),
                ('color', models.CharField(blank=True, max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('display_order', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name_plural': 'Forum categories',
                'db_table': 'forum_categories',
                'ordering': ['display_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='PlatformAnalytics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(unique=True)),
                ('total_users', models.IntegerField(default=0)),
                ('new_users', models.IntegerField(default=0)),
                ('active_users', models.IntegerField(default=0)),
                ('total_chat_sessions', models.IntegerField(default=0)),
                ('total_messages', models.IntegerField(default=0)),
                ('total_mood_entries', models.IntegerField(default=0)),
                ('total_forum_posts', models.IntegerField(default=0)),
                ('crisis_alerts', models.IntegerField(default=0)),
                ('crisis_interventions', models.IntegerField(default=0)),
                ('total_appointments', models.IntegerField(default=0)),
                ('completed_appointments', models.IntegerField(default=0)),
                ('users_by_country', models.JSONField(default=dict)),
                ('users_by_age_group', models.JSONField(default=dict)),
                ('average_mood_score', models.FloatField(blank=True, null=True)),
                ('average_sentiment', models.FloatField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name_plural': 'Platform analytics',
                'db_table': 'platform_analytics',
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='WellnessActivity',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('activity_type', models.CharField(choices=[('breathing', 'Breathing Exercise'), ('meditation', 'Meditation'), ('journaling', 'Journaling'), ('physical', 'Physical Exercise'), ('mindfulness', 'Mindfulness'), ('grounding', 'Grounding Technique'), ('gratitude', 'Gratitude Practice'), ('creative', 'Creative Expression')], max_length=20)),
                ('description', models.TextField()),
                ('instructions', models.TextField()),
                ('duration_minutes', models.IntegerField()),
                ('difficulty', models.CharField(max_length=20)),
                ('audio_guide_url', models.URLField(blank=True)),
                ('video_url', models.URLField(blank=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='activities/')),
                ('benefits', models.JSONField(default=list)),
                ('best_for', models.JSONField(default=list)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name_plural': 'Wellness activities',
                'db_table': 'wellness_activities',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('user_type', models.CharField(choices=[('student', 'Student'), ('child', 'Child/Teen'), ('adult', 'Adult'), ('therapist', 'Professional Therapist'), ('moderator', 'Community Moderator'), ('admin', 'Platform Admin')], max_length=20)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('gender', models.CharField(blank=True, choices=[('male', 'Male'), ('female', 'Female'), ('non_binary', 'Non-Binary'), ('prefer_not_to_say', 'Prefer Not to Say'), ('other', 'Other')], max_length=20, null=True)),
                ('phone_number', models.CharField(blank=True, max_length=20)),
                ('country', models.CharField(max_length=100)),
                ('region', models.CharField(blank=True, max_length=100)),
                ('preferred_language', models.CharField(default='en', max_length=10)),
                ('timezone', models.CharField(default='UTC', max_length=50)),
                ('is_anonymous', models.BooleanField(default=False)),
                ('data_sharing_consent', models.BooleanField(default=False)),
                ('is_verified', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('account_suspended', models.BooleanField(default=False)),
                ('suspension_reason', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_active', models.DateTimeField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AuditLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(max_length=100)),
                ('model_name', models.CharField(max_length=100)),
                ('object_id', models.CharField(max_length=100)),
                ('changes', models.JSONField(default=dict)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'audit_logs',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='BotResponse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('response_template', models.CharField(blank=True, max_length=100)),
                ('confidence_score', models.FloatField()),
                ('user_rating', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('was_helpful', models.BooleanField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('message', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bot_responses', to='web_application.chatmessage')),
            ],
            options={
                'db_table': 'bot_responses',
            },
        ),
        migrations.CreateModel(
            name='ChatSession',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('session_title', models.CharField(blank=True, max_length=200)),
                ('status', models.CharField(choices=[('active', 'Active'), ('ended', 'Ended'), ('escalated', 'Escalated to Human'), ('crisis_detected', 'Crisis Detected')], default='active', max_length=20)),
                ('ai_model_version', models.CharField(max_length=50)),
                ('therapy_framework', models.CharField(default='CBT', max_length=50)),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('ended_at', models.DateTimeField(blank=True, null=True)),
                ('total_messages', models.IntegerField(default=0)),
                ('crisis_detected', models.BooleanField(default=False)),
                ('crisis_severity', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('crisis_handled', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chat_sessions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'chat_sessions',
                'ordering': ['-started_at'],
            },
        ),
        migrations.AddField(
            model_name='chatmessage',
            name='session',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='web_application.chatsession'),
        ),
        migrations.CreateModel(
            name='CounselingAppointment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('session_type', models.CharField(choices=[('video', 'Video Call'), ('audio', 'Audio Call'), ('chat', 'Text Chat'), ('in_person', 'In Person')], max_length=20)),
                ('scheduled_date', models.DateField()),
                ('scheduled_time', models.TimeField()),
                ('duration_minutes', models.IntegerField(default=60)),
                ('status', models.CharField(choices=[('scheduled', 'Scheduled'), ('confirmed', 'Confirmed'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('no_show', 'No Show')], default='scheduled', max_length=20)),
                ('meeting_link', models.URLField(blank=True)),
                ('meeting_id', models.CharField(blank=True, max_length=100)),
                ('notes_for_therapist', models.TextField(blank=True)),
                ('fee', models.DecimalField(decimal_places=2, max_digits=10)),
                ('payment_status', models.CharField(default='pending', max_length=20)),
                ('attended', models.BooleanField(blank=True, null=True)),
                ('session_notes', models.TextField(blank=True)),
                ('next_session_recommended', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='counseling_appointments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'counseling_appointments',
                'ordering': ['-scheduled_date', '-scheduled_time'],
            },
        ),
        migrations.CreateModel(
            name='CrisisResource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('country', models.CharField(max_length=100)),
                ('region', models.CharField(blank=True, max_length=100)),
                ('resource_type', models.CharField(max_length=50)),
                ('name', models.CharField(max_length=200)),
                ('phone_number', models.CharField(blank=True, max_length=20)),
                ('website', models.URLField(blank=True)),
                ('chat_url', models.URLField(blank=True)),
                ('address', models.TextField(blank=True)),
                ('available_24_7', models.BooleanField(default=False)),
                ('languages_supported', models.JSONField(default=list)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'crisis_resources',
                'indexes': [models.Index(fields=['country', 'is_active'], name='crisis_reso_country_d34d28_idx')],
            },
        ),
        migrations.CreateModel(
            name='EmergencyContact',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('relationship', models.CharField(max_length=100)),
                ('phone_number', models.CharField(max_length=20)),
                ('email', models.EmailField(blank=True, max_length=254)),
                ('is_primary', models.BooleanField(default=False)),
                ('can_be_contacted_during_crisis', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='emergency_contacts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'emergency_contacts',
                'ordering': ['-is_primary', 'name'],
            },
        ),
        migrations.CreateModel(
            name='ForumPost',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=300)),
                ('content', models.TextField()),
                ('is_anonymous', models.BooleanField(default=False)),
                ('view_count', models.IntegerField(default=0)),
                ('like_count', models.IntegerField(default=0)),
                ('reply_count', models.IntegerField(default=0)),
                ('is_published', models.BooleanField(default=True)),
                ('is_pinned', models.BooleanField(default=False)),
                ('is_locked', models.BooleanField(default=False)),
                ('is_flagged', models.BooleanField(default=False)),
                ('moderation_status', models.CharField(default='approved', max_length=20)),
                ('toxicity_score', models.FloatField(blank=True, null=True)),
                ('sentiment_score', models.FloatField(blank=True, null=True)),
                ('ai_flagged', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='forum_posts', to=settings.AUTH_USER_MODEL)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='posts', to='web_application.forumcategory')),
            ],
            options={
                'db_table': 'forum_posts',
                'ordering': ['-is_pinned', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ForumReply',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('content', models.TextField()),
                ('is_anonymous', models.BooleanField(default=False)),
                ('like_count', models.IntegerField(default=0)),
                ('is_published', models.BooleanField(default=True)),
                ('is_flagged', models.BooleanField(default=False)),
                ('toxicity_score', models.FloatField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='forum_replies', to=settings.AUTH_USER_MODEL)),
                ('parent_reply', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='nested_replies', to='web_application.forumreply')),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='web_application.forumpost')),
            ],
            options={
                'verbose_name_plural': 'Forum replies',
                'db_table': 'forum_replies',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='ForumLike',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('post', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='likes', to='web_application.forumpost')),
                ('reply', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='likes', to='web_application.forumreply')),
            ],
            options={
                'db_table': 'forum_likes',
            },
        ),
        migrations.CreateModel(
            name='ContentModerationLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_type', models.CharField(choices=[('approve', 'Approved'), ('flag', 'Flagged'), ('remove', 'Removed'), ('warn', 'Warning Issued'), ('ban', 'User Banned')], max_length=20)),
                ('reason', models.TextField()),
                ('notes', models.TextField(blank=True)),
                ('ai_suggested', models.BooleanField(default=False)),
                ('ai_confidence', models.FloatField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('chat_message', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='web_application.chatmessage')),
                ('moderator', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='moderation_actions', to=settings.AUTH_USER_MODEL)),
                ('forum_post', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='web_application.forumpost')),
                ('forum_reply', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='web_application.forumreply')),
            ],
            options={
                'db_table': 'content_moderation_logs',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ForumReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason', models.CharField(choices=[('spam', 'Spam'), ('harassment', 'Harassment'), ('hate_speech', 'Hate Speech'), ('self_harm', 'Self-Harm Content'), ('misinformation', 'Misinformation'), ('inappropriate', 'Inappropriate Content'), ('other', 'Other')], max_length=20)),
                ('description', models.TextField()),
                ('status', models.CharField(default='pending', max_length=20)),
                ('action_taken', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('post', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reports', to='web_application.forumpost')),
                ('reply', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reports', to='web_application.forumreply')),
                ('reporter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reports_made', to=settings.AUTH_USER_MODEL)),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reports_reviewed', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'forum_reports',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='JournalEntry',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(blank=True, max_length=300)),
                ('content', models.TextField()),
                ('prompt_used', models.CharField(blank=True, max_length=500)),
                ('sentiment_score', models.FloatField(blank=True, null=True)),
                ('emotions_detected', models.JSONField(default=dict)),
                ('themes', models.JSONField(default=list)),
                ('is_private', models.BooleanField(default=True)),
                ('mood_score', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='journal_entries', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Journal entries',
                'db_table': 'journal_entries',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='MoodEntry',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('mood_level', models.CharField(choices=[('very_bad', 'Very Bad'), ('bad', 'Bad'), ('neutral', 'Neutral'), ('good', 'Good'), ('very_good', 'Very Good')], max_length=20)),
                ('mood_score', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('emotions', models.JSONField(default=list)),
                ('energy_level', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('sleep_quality', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('sleep_hours', models.FloatField(blank=True, null=True)),
                ('activities', models.JSONField(default=list)),
                ('triggers', models.TextField(blank=True)),
                ('notes', models.TextField(blank=True)),
                ('location', models.CharField(blank=True, max_length=100)),
                ('weather', models.CharField(blank=True, max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('entry_date', models.DateField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mood_entries', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Mood entries',
                'db_table': 'mood_entries',
                'ordering': ['-entry_date', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CrisisAlert',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('severity', models.CharField(choices=[('low', 'Low Risk'), ('medium', 'Medium Risk'), ('high', 'High Risk'), ('critical', 'Critical - Immediate Intervention')], max_length=20)),
                ('status', models.CharField(choices=[('detected', 'Detected'), ('acknowledged', 'Acknowledged'), ('contacted', 'Emergency Contact Made'), ('resolved', 'Resolved'), ('escalated', 'Escalated to Professional')], default='detected', max_length=20)),
                ('crisis_type', models.CharField(max_length=100)),
                ('triggering_content', models.TextField()),
                ('ai_confidence_score', models.FloatField()),
                ('keywords_matched', models.JSONField(default=list)),
                ('intervention_taken', models.TextField(blank=True)),
                ('emergency_services_contacted', models.BooleanField(default=False)),
                ('emergency_contact_notified', models.BooleanField(default=False)),
                ('detected_at', models.DateTimeField(auto_now_add=True)),
                ('acknowledged_at', models.DateTimeField(blank=True, null=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('chat_session', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='web_application.chatsession')),
                ('responder', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='crisis_responses', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='crisis_alerts', to=settings.AUTH_USER_MODEL)),
                ('mood_entry', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='web_application.moodentry')),
            ],
            options={
                'db_table': 'crisis_alerts',
                'ordering': ['-detected_at'],
            },
        ),
        migrations.CreateModel(
            name='MoodPattern',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('period_type', models.CharField(max_length=20)),
                ('average_mood_score', models.FloatField()),
                ('mood_variance', models.FloatField()),
                ('trend_direction', models.CharField(max_length=20)),
                ('dominant_emotions', models.JSONField(default=list)),
                ('common_triggers', models.JSONField(default=list)),
                ('positive_activities', models.JSONField(default=list)),
                ('recommendations', models.TextField()),
                ('concern_level', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mood_patterns', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'mood_patterns',
                'ordering': ['-end_date'],
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('notification_type', models.CharField(choices=[('appointment', 'Appointment Reminder'), ('mood_check', 'Mood Check-in'), ('recommendation', 'New Recommendation'), ('message', 'New Message'), ('forum', 'Forum Activity'), ('crisis', 'Crisis Alert'), ('achievement', 'Achievement Unlocked'), ('system', 'System Notification')], max_length=20)),
                ('title', models.CharField(max_length=200)),
                ('message', models.TextField()),
                ('link_url', models.CharField(blank=True, max_length=500)),
                ('action_button_text', models.CharField(blank=True, max_length=100)),
                ('is_read', models.BooleanField(default=False)),
                ('is_archived', models.BooleanField(default=False)),
                ('priority', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('read_at', models.DateTimeField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'notifications',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='RegionalMentalHealthTrend',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('region', models.CharField(max_length=100)),
                ('country', models.CharField(max_length=100)),
                ('year', models.IntegerField()),
                ('month', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)])),
                ('total_users', models.IntegerField()),
                ('common_concerns', models.JSONField(default=list)),
                ('average_mood_score', models.FloatField()),
                ('crisis_rate', models.FloatField()),
                ('age_distribution', models.JSONField(default=dict)),
                ('user_type_distribution', models.JSONField(default=dict)),
                ('average_sessions_per_user', models.FloatField()),
                ('resource_usage', models.JSONField(default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'regional_mental_health_trends',
                'ordering': ['-year', '-month'],
                'unique_together': {('region', 'country', 'year', 'month')},
            },
        ),
        migrations.CreateModel(
            name='Resource',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=300)),
                ('resource_type', models.CharField(choices=[('article', 'Article'), ('video', 'Video'), ('audio', 'Audio/Podcast'), ('exercise', 'Exercise'), ('meditation', 'Meditation'), ('journal_prompt', 'Journal Prompt'), ('worksheet', 'Worksheet'), ('infographic', 'Infographic')], max_length=20)),
                ('description', models.TextField()),
                ('content', models.TextField(blank=True)),
                ('file_url', models.URLField(blank=True)),
                ('video_url', models.URLField(blank=True)),
                ('audio_url', models.URLField(blank=True)),
                ('thumbnail', models.ImageField(blank=True, null=True, upload_to='resources/')),
                ('author', models.CharField(blank=True, max_length=200)),
                ('source', models.CharField(blank=True, max_length=200)),
                ('duration_minutes', models.IntegerField(blank=True, null=True)),
                ('difficulty_level', models.CharField(blank=True, max_length=20)),
                ('tags', models.JSONField(default=list)),
                ('target_audience', models.JSONField(default=list)),
                ('mental_health_topics', models.JSONField(default=list)),
                ('language', models.CharField(default='en', max_length=10)),
                ('translations_available', models.JSONField(default=list)),
                ('view_count', models.IntegerField(default=0)),
                ('like_count', models.IntegerField(default=0)),
                ('share_count', models.IntegerField(default=0)),
                ('average_rating', models.FloatField(default=0.0)),
                ('is_featured', models.BooleanField(default=False)),
                ('is_published', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'resources',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['resource_type', '-created_at'], name='resources_resourc_f9b8ae_idx'), models.Index(fields=['is_featured', '-view_count'], name='resources_is_feat_6c1006_idx')],
            },
        ),
        migrations.CreateModel(
            name='SystemConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(max_length=100, unique=True)),
                ('value', models.JSONField()),
                ('description', models.TextField()),
                ('is_active', models.BooleanField(default=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('updated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'system_configuration',
            },
        ),
        migrations.CreateModel(
            name='TherapistProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('license_number', models.CharField(max_length=100, unique=True)),
                ('specializations', models.JSONField(default=list)),
                ('years_of_experience', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('education', models.TextField()),
                ('certifications', models.TextField()),
                ('is_verified', models.BooleanField(default=False)),
                ('verification_documents', models.JSONField(default=list)),
                ('verified_at', models.DateTimeField(blank=True, null=True)),
                ('practice_name', models.CharField(blank=True, max_length=200)),
                ('practice_address', models.TextField(blank=True)),
                ('consultation_fee', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('accepts_insurance', models.BooleanField(default=False)),
                ('languages_spoken', models.JSONField(default=list)),
                ('available_for_sessions', models.BooleanField(default=True)),
                ('max_clients', models.IntegerField(default=20)),
                ('average_rating', models.DecimalField(decimal_places=2, default=0.0, max_digits=3)),
                ('total_sessions', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='therapist_profile', to=settings.AUTH_USER_MODEL)),
                ('verified_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='verified_therapists', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'therapist_profiles',
            },
        ),
        migrations.CreateModel(
            name='TherapistAvailability',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day_of_week', models.IntegerField(choices=[(0, 'Monday'), (1, 'Tuesday'), (2, 'Wednesday'), (3, 'Thursday'), (4, 'Friday'), (5, 'Saturday'), (6, 'Sunday')])),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('is_available', models.BooleanField(default=True)),
                ('therapist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='availability_slots', to='web_application.therapistprofile')),
            ],
            options={
                'db_table': 'therapist_availability',
                'ordering': ['day_of_week', 'start_time'],
            },
        ),
        migrations.CreateModel(
            name='SessionNote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('presenting_issue', models.TextField()),
                ('observations', models.TextField()),
                ('interventions_used', models.TextField()),
                ('client_response', models.TextField()),
                ('homework_assigned', models.TextField(blank=True)),
                ('risk_assessment', models.TextField()),
                ('progress_notes', models.TextField()),
                ('treatment_plan_updates', models.TextField(blank=True)),
                ('follow_up_needed', models.BooleanField(default=False)),
                ('follow_up_date', models.DateField(blank=True, null=True)),
                ('referrals_made', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('appointment', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='private_notes', to='web_application.counselingappointment')),
                ('therapist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='session_notes', to='web_application.therapistprofile')),
            ],
            options={
                'db_table': 'session_notes',
            },
        ),
        migrations.AddField(
            model_name='counselingappointment',
            name='therapist',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='appointments', to='web_application.therapistprofile'),
        ),
        migrations.CreateModel(
            name='AIRecommendation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('recommendation_type', models.CharField(choices=[('resource', 'Resource'), ('activity', 'Activity'), ('therapist', 'Therapist'), ('crisis_resource', 'Crisis Resource'), ('coping_strategy', 'Coping Strategy')], max_length=20)),
                ('title', models.CharField(max_length=300)),
                ('description', models.TextField()),
                ('reason', models.TextField()),
                ('confidence_score', models.FloatField()),
                ('based_on_data', models.JSONField(default=dict)),
                ('viewed', models.BooleanField(default=False)),
                ('acted_upon', models.BooleanField(default=False)),
                ('dismissed', models.BooleanField(default=False)),
                ('feedback_rating', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('priority', models.IntegerField(default=0)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recommendations', to=settings.AUTH_USER_MODEL)),
                ('resource', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='web_application.resource')),
                ('therapist', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='web_application.therapistprofile')),
            ],
            options={
                'db_table': 'ai_recommendations',
                'ordering': ['-priority', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TherapistReview',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('review_text', models.TextField(blank=True)),
                ('professionalism', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('effectiveness', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('empathy', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('would_recommend', models.BooleanField()),
                ('is_anonymous', models.BooleanField(default=False)),
                ('is_published', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('appointment', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='review', to='web_application.counselingappointment')),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews_given', to=settings.AUTH_USER_MODEL)),
                ('therapist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='web_application.therapistprofile')),
            ],
            options={
                'db_table': 'therapist_reviews',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserAchievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('earned_at', models.DateTimeField(auto_now_add=True)),
                ('achievement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='earned_by', to='web_application.achievement')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='achievements', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_achievements',
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bio', models.TextField(blank=True, max_length=500)),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars/')),
                ('university', models.CharField(blank=True, max_length=200)),
                ('field_of_study', models.CharField(blank=True, max_length=200)),
                ('academic_year', models.CharField(blank=True, max_length=50)),
                ('has_previous_therapy', models.BooleanField(default=False)),
                ('current_medications', models.TextField(blank=True)),
                ('diagnosed_conditions', models.TextField(blank=True)),
                ('notification_preferences', models.JSONField(default=dict)),
                ('accessibility_settings', models.JSONField(default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_profiles',
            },
        ),
        migrations.CreateModel(
            name='UserResourceInteraction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('viewed', models.BooleanField(default=False)),
                ('completed', models.BooleanField(default=False)),
                ('liked', models.BooleanField(default=False)),
                ('saved', models.BooleanField(default=False)),
                ('shared', models.BooleanField(default=False)),
                ('rating', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('feedback', models.TextField(blank=True)),
                ('was_helpful', models.BooleanField(blank=True, null=True)),
                ('progress_percentage', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('time_spent_minutes', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('resource', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='interactions', to='web_application.resource')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='resource_interactions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_resource_interactions',
            },
        ),
        migrations.CreateModel(
            name='UserStreak',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('current_mood_streak', models.IntegerField(default=0)),
                ('longest_mood_streak', models.IntegerField(default=0)),
                ('current_activity_streak', models.IntegerField(default=0)),
                ('longest_activity_streak', models.IntegerField(default=0)),
                ('last_mood_entry', models.DateField(blank=True, null=True)),
                ('last_activity', models.DateField(blank=True, null=True)),
                ('total_points', models.IntegerField(default=0)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='streak', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_streaks',
            },
        ),
        migrations.CreateModel(
            name='UserActivityLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('completed', models.BooleanField(default=False)),
                ('duration_minutes', models.IntegerField()),
                ('mood_before', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('mood_after', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('notes', models.TextField(blank=True)),
                ('was_helpful', models.BooleanField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='activity_logs', to=settings.AUTH_USER_MODEL)),
                ('activity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='completion_logs', to='web_application.wellnessactivity')),
            ],
            options={
                'db_table': 'user_activity_logs',
                'ordering': ['-completed_at'],
            },
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['user_type', 'country'], name='users_user_ty_241cc5_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['created_at'], name='users_created_6541e9_idx'),
        ),
        migrations.AddIndex(
            model_name='auditlog',
            index=models.Index(fields=['user', '-timestamp'], name='audit_logs_user_id_e11c73_idx'),
        ),
        migrations.AddIndex(
            model_name='auditlog',
            index=models.Index(fields=['model_name', 'object_id'], name='audit_logs_model_n_656046_idx'),
        ),
        migrations.AddIndex(
            model_name='chatsession',
            index=models.Index(fields=['user', '-started_at'], name='chat_sessio_user_id_bf73d7_idx'),
        ),
        migrations.AddIndex(
            model_name='chatsession',
            index=models.Index(fields=['crisis_detected', 'crisis_handled'], name='chat_sessio_crisis__f2f8bf_idx'),
        ),
        migrations.AddIndex(
            model_name='chatmessage',
            index=models.Index(fields=['session', 'created_at'], name='chat_messag_session_597c4e_idx'),
        ),
        migrations.AddIndex(
            model_name='chatmessage',
            index=models.Index(fields=['requires_intervention'], name='chat_messag_require_bf4bf3_idx'),
        ),
        migrations.AddIndex(
            model_name='forumpost',
            index=models.Index(fields=['category', '-created_at'], name='forum_posts_categor_768d74_idx'),
        ),
        migrations.AddIndex(
            model_name='forumpost',
            index=models.Index(fields=['author', '-created_at'], name='forum_posts_author__bf08f8_idx'),
        ),
        migrations.AddConstraint(
            model_name='forumlike',
            constraint=models.UniqueConstraint(fields=('user', 'post'), name='unique_user_post_like'),
        ),
        migrations.AddConstraint(
            model_name='forumlike',
            constraint=models.UniqueConstraint(fields=('user', 'reply'), name='unique_user_reply_like'),
        ),
        migrations.AddIndex(
            model_name='moodentry',
            index=models.Index(fields=['user', '-entry_date'], name='mood_entrie_user_id_b37ca2_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='moodentry',
            unique_together={('user', 'entry_date')},
        ),
        migrations.AddIndex(
            model_name='crisisalert',
            index=models.Index(fields=['status', 'severity'], name='crisis_aler_status_36a0ad_idx'),
        ),
        migrations.AddIndex(
            model_name='crisisalert',
            index=models.Index(fields=['user', '-detected_at'], name='crisis_aler_user_id_903a99_idx'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['user', 'is_read', '-created_at'], name='notificatio_user_id_c4e471_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='therapistavailability',
            unique_together={('therapist', 'day_of_week', 'start_time')},
        ),
        migrations.AddIndex(
            model_name='counselingappointment',
            index=models.Index(fields=['client', '-scheduled_date'], name='counseling__client__816eda_idx'),
        ),
        migrations.AddIndex(
            model_name='counselingappointment',
            index=models.Index(fields=['therapist', '-scheduled_date'], name='counseling__therapi_2972ba_idx'),
        ),
        migrations.AddIndex(
            model_name='counselingappointment',
            index=models.Index(fields=['status', 'scheduled_date'], name='counseling__status_1d8b44_idx'),
        ),
        migrations.AddIndex(
            model_name='airecommendation',
            index=models.Index(fields=['user', '-created_at'], name='ai_recommen_user_id_4b41b8_idx'),
        ),
        migrations.AddIndex(
            model_name='airecommendation',
            index=models.Index(fields=['viewed', 'dismissed'], name='ai_recommen_viewed_7e9104_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='userachievement',
            unique_together={('user', 'achievement')},
        ),
        migrations.AlterUniqueTogether(
            name='userresourceinteraction',
            unique_together={('user', 'resource')},
        ),
    ]
